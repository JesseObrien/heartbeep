// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package beeps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BeepCollectorClient is the client API for BeepCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeepCollectorClient interface {
	// Receives a beep, sends a beep back
	Beep(ctx context.Context, in *BeepRequest, opts ...grpc.CallOption) (*BeepResponse, error)
}

type beepCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewBeepCollectorClient(cc grpc.ClientConnInterface) BeepCollectorClient {
	return &beepCollectorClient{cc}
}

func (c *beepCollectorClient) Beep(ctx context.Context, in *BeepRequest, opts ...grpc.CallOption) (*BeepResponse, error) {
	out := new(BeepResponse)
	err := c.cc.Invoke(ctx, "/beeps.BeepCollector/Beep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeepCollectorServer is the server API for BeepCollector service.
// All implementations must embed UnimplementedBeepCollectorServer
// for forward compatibility
type BeepCollectorServer interface {
	// Receives a beep, sends a beep back
	Beep(context.Context, *BeepRequest) (*BeepResponse, error)
	mustEmbedUnimplementedBeepCollectorServer()
}

// UnimplementedBeepCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedBeepCollectorServer struct {
}

func (UnimplementedBeepCollectorServer) Beep(context.Context, *BeepRequest) (*BeepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Beep not implemented")
}
func (UnimplementedBeepCollectorServer) mustEmbedUnimplementedBeepCollectorServer() {}

// UnsafeBeepCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeepCollectorServer will
// result in compilation errors.
type UnsafeBeepCollectorServer interface {
	mustEmbedUnimplementedBeepCollectorServer()
}

func RegisterBeepCollectorServer(s grpc.ServiceRegistrar, srv BeepCollectorServer) {
	s.RegisterService(&_BeepCollector_serviceDesc, srv)
}

func _BeepCollector_Beep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeepCollectorServer).Beep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beeps.BeepCollector/Beep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeepCollectorServer).Beep(ctx, req.(*BeepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeepCollector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "beeps.BeepCollector",
	HandlerType: (*BeepCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Beep",
			Handler:    _BeepCollector_Beep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/beeps/beeper.proto",
}
